On gpu1.usask.ca, in /u1/TIGER, I've placed a number of files.  Most notably,

  assemble -- a shell script that takes a single *.s file and
  	      assembles it with the system library into a RISCV32 executable
	      using the gnu toolchain in /opt/riscv32

  run      -- a shell script that takes a RISCV32 executable and runs it
              using the riscv32-qemu simulator from /opt/riscv32

and the support files it relies on:

  main.c -- a simple RISCV32 entry point for LINUX

  syslib.s -- the complete TIGER syslib for RISCV32 LINUX
  	      	  only three routines interact with the OS:
		       print(string),
		       getchar():string,
		       exit(int)
	          the other routines are entirely self-contained

An example TIGER program, and the three stages:
  ret2.tig -- a TIGER program
  ret2.s   -- the compiled version of the TIGER program
  ret2     -- the assembled version of the TIGER program

For example, my TIGER implementation compiled `ret2.tig' into `ret2.s'.  Then
		"compile ret2.s"
built `ret2', which
		"run ret2"
executes correctly.  In order for this to work, some conventions need to be
followed:
	* TIGER must emit the code for the main expression as
	  	the `tigermain'	procedure
	* my compiler emits calls to external functions (system library and
	     	other support routines) as calls to a label with
		the function name prefixed by "_"; this means my `env.sml'
		contains the usual names; I've supplied that file.
	* the system library must interoperate with the TIGER compiler;
	      	I've supplied my `syslib.s'
		
My system library has been tested, you can see most of the test suite in
   	    testSyslib.c
which might also help you to understand RISCV32.  If you tried
      /opt/riscv32/bin/riscv32-unknown-elf-gcc -S main.c
      /opt/riscv32/bin/riscv32-unknown-elf-gcc -S testSyslib.c
then you'd get a
      main.s, and
      testSyslib.s
which contain the RISCV32 assembly code for the C code.

14/04/2018

I've uploaded an escape.sml since the one I gave you was incomplete.  My apologies.
